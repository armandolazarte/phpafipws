<?php

declare(strict_types=1);

use PhpAfipWs\Afip;
use PhpAfipWs\Exception\AfipException;

require_once __DIR__.'/../vendor/autoload.php';

/**
 * Ejemplo: Obtener tipos de datos opcionales
 *
 * Este ejemplo muestra c√≥mo consultar los tipos de datos opcionales
 * que se pueden incluir en los comprobantes electr√≥nicos.
 */
try {
    $afip = new Afip([
        'cuit' => 20294192345, // Reemplaza con tu CUIT
        'modo_produccion' => false,
        'nombre_certificado' => 'certificado.crt',
        'nombre_clave' => 'clave_privada.key',
        'contrasena_clave' => 'tu_passphrase', // opcional
        'carpeta_recursos' => __DIR__.'/resources/',
        'carpeta_ta' => __DIR__.'/ta/',
    ]);

    echo "=== CONSULTAR TIPOS DE DATOS OPCIONALES ===\n\n";
    echo 'Versi√≥n del SDK: '.$afip->obtenerVersionSdk()."\n";
    echo 'CUIT: '.$afip->obtenerCuit()."\n";
    echo 'Modo: '.($afip->esModoProduccion() ? 'Producci√≥n' : 'Homologaci√≥n')."\n\n";

    $facturacionElectronica = $afip->FacturacionElectronica;

    echo "Consultando tipos de datos opcionales disponibles...\n\n";

    // Obtener tipos opcionales
    $respuesta = $facturacionElectronica->obtenerTiposOpcional();

    echo "‚úÖ Respuesta recibida de AFIP\n\n";

    // Procesar la respuesta
    if (isset($respuesta->FEParamGetTiposOpcionalResult->ResultGet->OpcionalTipo)) {
        $tiposOpcional = $respuesta->FEParamGetTiposOpcionalResult->ResultGet->OpcionalTipo;

        // Asegurar que sea un array
        if (! is_array($tiposOpcional)) {
            $tiposOpcional = [$tiposOpcional];
        }

        echo "TIPOS DE DATOS OPCIONALES DISPONIBLES:\n";
        echo str_repeat('=', 70)."\n";

        foreach ($tiposOpcional as $opcional) {
            $id = $opcional->Id ?? 'N/A';
            $desc = $opcional->Desc ?? 'Sin descripci√≥n';

            echo sprintf("‚Ä¢ ID: %s\n", $id);
            echo sprintf("  Descripci√≥n: %s\n", $desc);

            // Informaci√≥n adicional seg√∫n el tipo
            switch ($id) {
                case 1:
                    echo "  üí≥ Tipo: CVU (Clave Virtual Uniforme)\n";
                    echo "  ‚ÑπÔ∏è  Uso: Para transferencias bancarias digitales\n";
                    echo "  üìù Formato: 22 d√≠gitos num√©ricos\n";
                    break;
                case 2:
                    echo "  üè¶ Tipo: CBU (Clave Bancaria Uniforme)\n";
                    echo "  ‚ÑπÔ∏è  Uso: Para transferencias bancarias tradicionales\n";
                    echo "  üìù Formato: 22 d√≠gitos num√©ricos\n";
                    break;
                case 3:
                    echo "  üî§ Tipo: Alias CBU\n";
                    echo "  ‚ÑπÔ∏è  Uso: Alias alfanum√©rico del CBU\n";
                    echo "  üìù Formato: Texto alfanum√©rico\n";
                    break;
                case 4:
                    echo "  üìß Tipo: Email\n";
                    echo "  ‚ÑπÔ∏è  Uso: Direcci√≥n de correo electr√≥nico\n";
                    echo "  üìù Formato: email@dominio.com\n";
                    break;
                case 5:
                    echo "  üì± Tipo: Tel√©fono\n";
                    echo "  ‚ÑπÔ∏è  Uso: N√∫mero de tel√©fono de contacto\n";
                    echo "  üìù Formato: Num√©rico con c√≥digo de √°rea\n";
                    break;
                default:
                    echo "  ‚ÑπÔ∏è  Tipo: Otro dato opcional\n";
                    break;
            }

            if (isset($opcional->FchDesde) && $opcional->FchDesde !== null) {
                echo sprintf("  üìÖ Vigente desde: %s\n", $opcional->FchDesde);
            }

            if (isset($opcional->FchHasta) && $opcional->FchHasta !== null && $opcional->FchHasta !== 'NULL') {
                echo sprintf("  üìÖ Vigente hasta: %s\n", $opcional->FchHasta);
            } else {
                echo "  üìÖ Estado: Actualmente vigente\n";
            }

            echo "\n";
        }

        echo sprintf("Total de tipos opcionales: %d\n\n", count($tiposOpcional));

        // Mostrar los m√°s comunes
        $opcionalesComunes = array_filter($tiposOpcional, fn ($o): bool => isset($o->Id) && in_array($o->Id, [1, 2, 3, 4, 5]));

        if ($opcionalesComunes !== []) {
            echo "TIPOS M√ÅS UTILIZADOS:\n";
            echo str_repeat('-', 40)."\n";
            foreach ($opcionalesComunes as $opcional) {
                $id = $opcional->Id ?? 'N/A';
                $desc = $opcional->Desc ?? 'Sin descripci√≥n';
                echo sprintf("‚Ä¢ ID %s: %s\n", $id, $desc);
            }

            echo "\n";
        }

    } else {
        // Verificar si hay error en la respuesta
        if (isset($respuesta->FEParamGetTiposOpcionalResult->Errors->Err->Code)) {
            $error = $respuesta->FEParamGetTiposOpcionalResult->Errors->Err;
            echo "‚ÑπÔ∏è  INFORMACI√ìN SOBRE ERROR:\n";
            echo sprintf('‚Ä¢ C√≥digo: %s%s', $error->Code, PHP_EOL);
            echo "‚Ä¢ Mensaje: {$error->Msg}\n\n";

            if ($error->Code === 602) {
                echo "üìã EXPLICACI√ìN:\n";
                echo "‚Ä¢ Este error indica que no hay tipos opcionales disponibles\n";
                echo "‚Ä¢ Es normal en algunos entornos de homologaci√≥n\n";
                echo "‚Ä¢ En producci√≥n, consulta con AFIP sobre disponibilidad\n\n";
            }
        } else {
            echo "‚ùå No se encontraron tipos opcionales en la respuesta\n";
        }

        echo "Respuesta completa:\n";
        print_r($respuesta);
    }

    echo "\n=== GU√çA DE USO EN FACTURACI√ìN ===\n\n";

    echo "üìã ESTRUCTURA DE DATOS OPCIONALES EN COMPROBANTES:\n\n";

    echo "<?php\n";
    echo "// Ejemplo de estructura para el campo 'Opcionales' en comprobantes\n";
    echo "\$datosComprobante = [\n";
    echo "    // ... otros campos\n";
    echo "    'Opcionales' => [\n";
    echo "        [\n";
    echo "            'Id' => 1,                    // ID del tipo opcional (CVU)\n";
    echo "            'Valor' => '1234567890123456789012', // Valor del CVU\n";
    echo "        ],\n";
    echo "        [\n";
    echo "            'Id' => 4,                    // ID del tipo opcional (Email)\n";
    echo "            'Valor' => 'cliente@email.com',      // Email del cliente\n";
    echo "        ],\n";
    echo "        // Puedes agregar m√°s datos opcionales si es necesario\n";
    echo "    ],\n";
    echo "];\n\n";

    echo "=== EJEMPLOS PR√ÅCTICOS ===\n\n";

    echo "EJEMPLO 1 - Factura con CVU para cobro:\n";
    echo "‚Ä¢ Incluir CVU del emisor para facilitar el pago\n";
    echo "‚Ä¢ √ötil para facturas B2B\n\n";

    echo "<?php\n";
    echo "\$opcionalCVU = [\n";
    echo "    'Id' => 1,\n";
    echo "    'Valor' => '1234567890123456789012', // CVU de 22 d√≠gitos\n";
    echo "];\n\n";

    echo "EJEMPLO 2 - Factura con CBU tradicional:\n";
    echo "‚Ä¢ Para clientes que prefieren transferencias bancarias\n";
    echo "‚Ä¢ M√°s com√∫n en empresas tradicionales\n\n";

    echo "<?php\n";
    echo "\$opcionalCBU = [\n";
    echo "    'Id' => 2,\n";
    echo "    'Valor' => '1234567890123456789012', // CBU de 22 d√≠gitos\n";
    echo "];\n\n";

    echo "EJEMPLO 3 - Factura con alias CBU:\n";
    echo "‚Ä¢ M√°s f√°cil de recordar que el CBU num√©rico\n";
    echo "‚Ä¢ Ideal para facturas a consumidores finales\n\n";

    echo "<?php\n";
    echo "\$opcionalAlias = [\n";
    echo "    'Id' => 3,\n";
    echo "    'Valor' => 'MI.EMPRESA.COBROS', // Alias alfanum√©rico\n";
    echo "];\n\n";

    echo "EJEMPLO 4 - M√∫ltiples datos opcionales:\n";
    echo "‚Ä¢ Combinar varios tipos para mayor informaci√≥n\n";
    echo "‚Ä¢ Email + CVU para facilitar comunicaci√≥n y pago\n\n";

    echo "<?php\n";
    echo "\$opcionalesMultiples = [\n";
    echo "    [\n";
    echo "        'Id' => 1,                        // CVU\n";
    echo "        'Valor' => '1234567890123456789012',\n";
    echo "    ],\n";
    echo "    [\n";
    echo "        'Id' => 4,                        // Email\n";
    echo "        'Valor' => 'cobranzas@empresa.com',\n";
    echo "    ],\n";
    echo "    [\n";
    echo "        'Id' => 5,                        // Tel√©fono\n";
    echo "        'Valor' => '1145678900',\n";
    echo "    ],\n";
    echo "];\n\n";

    echo "=== VALIDACIONES IMPORTANTES ===\n\n";

    echo "‚ö†Ô∏è  VALIDACIONES:\n";
    echo "‚Ä¢ CVU y CBU deben tener exactamente 22 d√≠gitos\n";
    echo "‚Ä¢ Email debe tener formato v√°lido\n";
    echo "‚Ä¢ Tel√©fono debe incluir c√≥digo de √°rea\n";
    echo "‚Ä¢ Alias CBU debe ser alfanum√©rico (sin espacios)\n";
    echo "‚Ä¢ Usa solo IDs de tipos v√°lidos (consulta esta tabla)\n";
    echo "‚Ä¢ Los datos opcionales no son obligatorios, pero si se incluyen deben ser v√°lidos\n\n";

    echo "=== FUNCI√ìN HELPER PARA VALIDACIONES ===\n\n";

    echo "<?php\n";
    echo "function validarDatoOpcional(\$tipoId, \$valor) {\n";
    echo "    switch (\$tipoId) {\n";
    echo "        case 1: // CVU\n";
    echo "        case 2: // CBU\n";
    echo "            return preg_match('/^\\d{22}$/', \$valor);\n";
    echo "        case 3: // Alias CBU\n";
    echo "            return preg_match('/^[A-Z0-9.]{6,20}$/', \$valor);\n";
    echo "        case 4: // Email\n";
    echo "            return filter_var(\$valor, FILTER_VALIDATE_EMAIL) !== false;\n";
    echo "        case 5: // Tel√©fono\n";
    echo "            return preg_match('/^\\d{8,15}$/', \$valor);\n";
    echo "        default:\n";
    echo "            return true; // Para tipos desconocidos, asumir v√°lido\n";
    echo "    }\n";
    echo "}\n\n";

    echo "// Uso:\n";
    echo "\$esValido = validarDatoOpcional(1, '1234567890123456789012'); // true para CVU v√°lido\n\n";

    echo "=== CONSEJOS DE USO ===\n\n";

    echo "üí° CONSEJOS:\n";
    echo "‚Ä¢ Incluye datos opcionales que faciliten el pago o contacto\n";
    echo "‚Ä¢ CVU es m√°s moderno y r√°pido que CBU tradicional\n";
    echo "‚Ä¢ Email es √∫til para env√≠o autom√°tico de comprobantes\n";
    echo "‚Ä¢ No abuses de los datos opcionales, incluye solo los necesarios\n";
    echo "‚Ä¢ Valida siempre el formato antes de enviar a AFIP\n";
    echo "‚Ä¢ En facturas B2C, considera incluir alias CBU por simplicidad\n";
    echo "‚Ä¢ En facturas B2B, CVU + email suele ser la mejor combinaci√≥n\n\n";

    echo "--- RESPUESTA COMPLETA DE AFIP ---\n";
    print_r($respuesta);

} catch (AfipException $e) {
    echo sprintf('‚ùå Error de AFIP: %s%s', $e->getMessage(), PHP_EOL);
    echo sprintf('   C√≥digo: %d%s', $e->getCode(), PHP_EOL);
    echo sprintf('   Tipo: %s%s', $e->obtenerTipoError(), PHP_EOL);
} catch (Exception $e) {
    echo sprintf('‚ùå Error general: %s%s', $e->getMessage(), PHP_EOL);
}
